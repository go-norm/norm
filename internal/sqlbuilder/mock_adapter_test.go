// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package sqlbuilder

import (
	"sync"

	adapter "unknwon.dev/norm/adapter"
)

// MockAdapter is a mock implementation of the Adapter interface (from the
// package unknwon.dev/norm/adapter) used for unit testing.
type MockAdapter struct {
	// ExecutorFunc is an instance of a mock function object controlling the
	// behavior of the method Executor.
	ExecutorFunc *AdapterExecutorFunc
	// FormatSQLFunc is an instance of a mock function object controlling
	// the behavior of the method FormatSQL.
	FormatSQLFunc *AdapterFormatSQLFunc
	// NameFunc is an instance of a mock function object controlling the
	// behavior of the method Name.
	NameFunc *AdapterNameFunc
	// TyperFunc is an instance of a mock function object controlling the
	// behavior of the method Typer.
	TyperFunc *AdapterTyperFunc
}

// NewMockAdapter creates a new mock of the Adapter interface. All methods
// return zero values for all results, unless overwritten.
func NewMockAdapter() *MockAdapter {
	return &MockAdapter{
		ExecutorFunc: &AdapterExecutorFunc{
			defaultHook: func() adapter.Executor {
				return nil
			},
		},
		FormatSQLFunc: &AdapterFormatSQLFunc{
			defaultHook: func(string) string {
				return ""
			},
		},
		NameFunc: &AdapterNameFunc{
			defaultHook: func() adapter.Name {
				return ""
			},
		},
		TyperFunc: &AdapterTyperFunc{
			defaultHook: func() adapter.Typer {
				return nil
			},
		},
	}
}

// NewStrictMockAdapter creates a new mock of the Adapter interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockAdapter() *MockAdapter {
	return &MockAdapter{
		ExecutorFunc: &AdapterExecutorFunc{
			defaultHook: func() adapter.Executor {
				panic("unexpected invocation of MockAdapter.Executor")
			},
		},
		FormatSQLFunc: &AdapterFormatSQLFunc{
			defaultHook: func(string) string {
				panic("unexpected invocation of MockAdapter.FormatSQL")
			},
		},
		NameFunc: &AdapterNameFunc{
			defaultHook: func() adapter.Name {
				panic("unexpected invocation of MockAdapter.Name")
			},
		},
		TyperFunc: &AdapterTyperFunc{
			defaultHook: func() adapter.Typer {
				panic("unexpected invocation of MockAdapter.Typer")
			},
		},
	}
}

// NewMockAdapterFrom creates a new mock of the MockAdapter interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockAdapterFrom(i adapter.Adapter) *MockAdapter {
	return &MockAdapter{
		ExecutorFunc: &AdapterExecutorFunc{
			defaultHook: i.Executor,
		},
		FormatSQLFunc: &AdapterFormatSQLFunc{
			defaultHook: i.FormatSQL,
		},
		NameFunc: &AdapterNameFunc{
			defaultHook: i.Name,
		},
		TyperFunc: &AdapterTyperFunc{
			defaultHook: i.Typer,
		},
	}
}

// AdapterExecutorFunc describes the behavior when the Executor method of
// the parent MockAdapter instance is invoked.
type AdapterExecutorFunc struct {
	defaultHook func() adapter.Executor
	hooks       []func() adapter.Executor
	history     []AdapterExecutorFuncCall
	mutex       sync.Mutex
}

// Executor delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAdapter) Executor() adapter.Executor {
	r0 := m.ExecutorFunc.nextHook()()
	m.ExecutorFunc.appendCall(AdapterExecutorFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Executor method of
// the parent MockAdapter instance is invoked and the hook queue is empty.
func (f *AdapterExecutorFunc) SetDefaultHook(hook func() adapter.Executor) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Executor method of the parent MockAdapter instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AdapterExecutorFunc) PushHook(hook func() adapter.Executor) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AdapterExecutorFunc) SetDefaultReturn(r0 adapter.Executor) {
	f.SetDefaultHook(func() adapter.Executor {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AdapterExecutorFunc) PushReturn(r0 adapter.Executor) {
	f.PushHook(func() adapter.Executor {
		return r0
	})
}

func (f *AdapterExecutorFunc) nextHook() func() adapter.Executor {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdapterExecutorFunc) appendCall(r0 AdapterExecutorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdapterExecutorFuncCall objects describing
// the invocations of this function.
func (f *AdapterExecutorFunc) History() []AdapterExecutorFuncCall {
	f.mutex.Lock()
	history := make([]AdapterExecutorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdapterExecutorFuncCall is an object that describes an invocation of
// method Executor on an instance of MockAdapter.
type AdapterExecutorFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 adapter.Executor
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdapterExecutorFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdapterExecutorFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdapterFormatSQLFunc describes the behavior when the FormatSQL method of
// the parent MockAdapter instance is invoked.
type AdapterFormatSQLFunc struct {
	defaultHook func(string) string
	hooks       []func(string) string
	history     []AdapterFormatSQLFuncCall
	mutex       sync.Mutex
}

// FormatSQL delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAdapter) FormatSQL(v0 string) string {
	r0 := m.FormatSQLFunc.nextHook()(v0)
	m.FormatSQLFunc.appendCall(AdapterFormatSQLFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the FormatSQL method of
// the parent MockAdapter instance is invoked and the hook queue is empty.
func (f *AdapterFormatSQLFunc) SetDefaultHook(hook func(string) string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FormatSQL method of the parent MockAdapter instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *AdapterFormatSQLFunc) PushHook(hook func(string) string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AdapterFormatSQLFunc) SetDefaultReturn(r0 string) {
	f.SetDefaultHook(func(string) string {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AdapterFormatSQLFunc) PushReturn(r0 string) {
	f.PushHook(func(string) string {
		return r0
	})
}

func (f *AdapterFormatSQLFunc) nextHook() func(string) string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdapterFormatSQLFunc) appendCall(r0 AdapterFormatSQLFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdapterFormatSQLFuncCall objects describing
// the invocations of this function.
func (f *AdapterFormatSQLFunc) History() []AdapterFormatSQLFuncCall {
	f.mutex.Lock()
	history := make([]AdapterFormatSQLFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdapterFormatSQLFuncCall is an object that describes an invocation of
// method FormatSQL on an instance of MockAdapter.
type AdapterFormatSQLFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdapterFormatSQLFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdapterFormatSQLFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdapterNameFunc describes the behavior when the Name method of the parent
// MockAdapter instance is invoked.
type AdapterNameFunc struct {
	defaultHook func() adapter.Name
	hooks       []func() adapter.Name
	history     []AdapterNameFuncCall
	mutex       sync.Mutex
}

// Name delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAdapter) Name() adapter.Name {
	r0 := m.NameFunc.nextHook()()
	m.NameFunc.appendCall(AdapterNameFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Name method of the
// parent MockAdapter instance is invoked and the hook queue is empty.
func (f *AdapterNameFunc) SetDefaultHook(hook func() adapter.Name) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Name method of the parent MockAdapter instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *AdapterNameFunc) PushHook(hook func() adapter.Name) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AdapterNameFunc) SetDefaultReturn(r0 adapter.Name) {
	f.SetDefaultHook(func() adapter.Name {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AdapterNameFunc) PushReturn(r0 adapter.Name) {
	f.PushHook(func() adapter.Name {
		return r0
	})
}

func (f *AdapterNameFunc) nextHook() func() adapter.Name {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdapterNameFunc) appendCall(r0 AdapterNameFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdapterNameFuncCall objects describing the
// invocations of this function.
func (f *AdapterNameFunc) History() []AdapterNameFuncCall {
	f.mutex.Lock()
	history := make([]AdapterNameFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdapterNameFuncCall is an object that describes an invocation of method
// Name on an instance of MockAdapter.
type AdapterNameFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 adapter.Name
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdapterNameFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdapterNameFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// AdapterTyperFunc describes the behavior when the Typer method of the
// parent MockAdapter instance is invoked.
type AdapterTyperFunc struct {
	defaultHook func() adapter.Typer
	hooks       []func() adapter.Typer
	history     []AdapterTyperFuncCall
	mutex       sync.Mutex
}

// Typer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockAdapter) Typer() adapter.Typer {
	r0 := m.TyperFunc.nextHook()()
	m.TyperFunc.appendCall(AdapterTyperFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Typer method of the
// parent MockAdapter instance is invoked and the hook queue is empty.
func (f *AdapterTyperFunc) SetDefaultHook(hook func() adapter.Typer) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Typer method of the parent MockAdapter instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *AdapterTyperFunc) PushHook(hook func() adapter.Typer) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *AdapterTyperFunc) SetDefaultReturn(r0 adapter.Typer) {
	f.SetDefaultHook(func() adapter.Typer {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *AdapterTyperFunc) PushReturn(r0 adapter.Typer) {
	f.PushHook(func() adapter.Typer {
		return r0
	})
}

func (f *AdapterTyperFunc) nextHook() func() adapter.Typer {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *AdapterTyperFunc) appendCall(r0 AdapterTyperFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of AdapterTyperFuncCall objects describing the
// invocations of this function.
func (f *AdapterTyperFunc) History() []AdapterTyperFuncCall {
	f.mutex.Lock()
	history := make([]AdapterTyperFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// AdapterTyperFuncCall is an object that describes an invocation of method
// Typer on an instance of MockAdapter.
type AdapterTyperFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 adapter.Typer
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c AdapterTyperFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c AdapterTyperFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
