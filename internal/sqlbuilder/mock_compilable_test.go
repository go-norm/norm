// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package sqlbuilder

import "sync"

// MockCompilable is a mock implementation of the compilable interface (from
// the package unknwon.dev/norm/internal/sqlbuilder) used for unit testing.
type MockCompilable struct {
	// ArgumentsFunc is an instance of a mock function object controlling
	// the behavior of the method Arguments.
	ArgumentsFunc *CompilableArgumentsFunc
	// CompileFunc is an instance of a mock function object controlling the
	// behavior of the method Compile.
	CompileFunc *CompilableCompileFunc
}

// NewMockCompilable creates a new mock of the compilable interface. All
// methods return zero values for all results, unless overwritten.
func NewMockCompilable() *MockCompilable {
	return &MockCompilable{
		ArgumentsFunc: &CompilableArgumentsFunc{
			defaultHook: func() []interface{} {
				return nil
			},
		},
		CompileFunc: &CompilableCompileFunc{
			defaultHook: func() (string, error) {
				return "", nil
			},
		},
	}
}

// NewStrictMockCompilable creates a new mock of the compilable interface.
// All methods panic on invocation, unless overwritten.
func NewStrictMockCompilable() *MockCompilable {
	return &MockCompilable{
		ArgumentsFunc: &CompilableArgumentsFunc{
			defaultHook: func() []interface{} {
				panic("unexpected invocation of MockCompilable.Arguments")
			},
		},
		CompileFunc: &CompilableCompileFunc{
			defaultHook: func() (string, error) {
				panic("unexpected invocation of MockCompilable.Compile")
			},
		},
	}
}

// surrogateMockCompilable is a copy of the compilable interface (from the
// package unknwon.dev/norm/internal/sqlbuilder). It is redefined here as it
// is unexported in the source package.
type surrogateMockCompilable interface {
	Arguments() []interface{}
	Compile() (string, error)
}

// NewMockCompilableFrom creates a new mock of the MockCompilable interface.
// All methods delegate to the given implementation, unless overwritten.
func NewMockCompilableFrom(i surrogateMockCompilable) *MockCompilable {
	return &MockCompilable{
		ArgumentsFunc: &CompilableArgumentsFunc{
			defaultHook: i.Arguments,
		},
		CompileFunc: &CompilableCompileFunc{
			defaultHook: i.Compile,
		},
	}
}

// CompilableArgumentsFunc describes the behavior when the Arguments method
// of the parent MockCompilable instance is invoked.
type CompilableArgumentsFunc struct {
	defaultHook func() []interface{}
	hooks       []func() []interface{}
	history     []CompilableArgumentsFuncCall
	mutex       sync.Mutex
}

// Arguments delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCompilable) Arguments() []interface{} {
	r0 := m.ArgumentsFunc.nextHook()()
	m.ArgumentsFunc.appendCall(CompilableArgumentsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Arguments method of
// the parent MockCompilable instance is invoked and the hook queue is
// empty.
func (f *CompilableArgumentsFunc) SetDefaultHook(hook func() []interface{}) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Arguments method of the parent MockCompilable instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CompilableArgumentsFunc) PushHook(hook func() []interface{}) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CompilableArgumentsFunc) SetDefaultReturn(r0 []interface{}) {
	f.SetDefaultHook(func() []interface{} {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CompilableArgumentsFunc) PushReturn(r0 []interface{}) {
	f.PushHook(func() []interface{} {
		return r0
	})
}

func (f *CompilableArgumentsFunc) nextHook() func() []interface{} {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CompilableArgumentsFunc) appendCall(r0 CompilableArgumentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CompilableArgumentsFuncCall objects
// describing the invocations of this function.
func (f *CompilableArgumentsFunc) History() []CompilableArgumentsFuncCall {
	f.mutex.Lock()
	history := make([]CompilableArgumentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CompilableArgumentsFuncCall is an object that describes an invocation of
// method Arguments on an instance of MockCompilable.
type CompilableArgumentsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CompilableArgumentsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CompilableArgumentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// CompilableCompileFunc describes the behavior when the Compile method of
// the parent MockCompilable instance is invoked.
type CompilableCompileFunc struct {
	defaultHook func() (string, error)
	hooks       []func() (string, error)
	history     []CompilableCompileFuncCall
	mutex       sync.Mutex
}

// Compile delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockCompilable) Compile() (string, error) {
	r0, r1 := m.CompileFunc.nextHook()()
	m.CompileFunc.appendCall(CompilableCompileFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Compile method of
// the parent MockCompilable instance is invoked and the hook queue is
// empty.
func (f *CompilableCompileFunc) SetDefaultHook(hook func() (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Compile method of the parent MockCompilable instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *CompilableCompileFunc) PushHook(hook func() (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *CompilableCompileFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func() (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *CompilableCompileFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func() (string, error) {
		return r0, r1
	})
}

func (f *CompilableCompileFunc) nextHook() func() (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *CompilableCompileFunc) appendCall(r0 CompilableCompileFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of CompilableCompileFuncCall objects
// describing the invocations of this function.
func (f *CompilableCompileFunc) History() []CompilableCompileFuncCall {
	f.mutex.Lock()
	history := make([]CompilableCompileFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// CompilableCompileFuncCall is an object that describes an invocation of
// method Compile on an instance of MockCompilable.
type CompilableCompileFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c CompilableCompileFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c CompilableCompileFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
