// Code generated by go-mockgen 1.1.2; DO NOT EDIT.

package sqlbuilder

import (
	"database/sql/driver"
	"sync"
)

// MockValuer is a mock implementation of the Valuer interface (from the
// package database/sql/driver) used for unit testing.
type MockValuer struct {
	// ValueFunc is an instance of a mock function object controlling the
	// behavior of the method Value.
	ValueFunc *ValuerValueFunc
}

// NewMockValuer creates a new mock of the Valuer interface. All methods
// return zero values for all results, unless overwritten.
func NewMockValuer() *MockValuer {
	return &MockValuer{
		ValueFunc: &ValuerValueFunc{
			defaultHook: func() (driver.Value, error) {
				return nil, nil
			},
		},
	}
}

// NewStrictMockValuer creates a new mock of the Valuer interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockValuer() *MockValuer {
	return &MockValuer{
		ValueFunc: &ValuerValueFunc{
			defaultHook: func() (driver.Value, error) {
				panic("unexpected invocation of MockValuer.Value")
			},
		},
	}
}

// NewMockValuerFrom creates a new mock of the MockValuer interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockValuerFrom(i driver.Valuer) *MockValuer {
	return &MockValuer{
		ValueFunc: &ValuerValueFunc{
			defaultHook: i.Value,
		},
	}
}

// ValuerValueFunc describes the behavior when the Value method of the
// parent MockValuer instance is invoked.
type ValuerValueFunc struct {
	defaultHook func() (driver.Value, error)
	hooks       []func() (driver.Value, error)
	history     []ValuerValueFuncCall
	mutex       sync.Mutex
}

// Value delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockValuer) Value() (driver.Value, error) {
	r0, r1 := m.ValueFunc.nextHook()()
	m.ValueFunc.appendCall(ValuerValueFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Value method of the
// parent MockValuer instance is invoked and the hook queue is empty.
func (f *ValuerValueFunc) SetDefaultHook(hook func() (driver.Value, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Value method of the parent MockValuer instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ValuerValueFunc) PushHook(hook func() (driver.Value, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ValuerValueFunc) SetDefaultReturn(r0 driver.Value, r1 error) {
	f.SetDefaultHook(func() (driver.Value, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ValuerValueFunc) PushReturn(r0 driver.Value, r1 error) {
	f.PushHook(func() (driver.Value, error) {
		return r0, r1
	})
}

func (f *ValuerValueFunc) nextHook() func() (driver.Value, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ValuerValueFunc) appendCall(r0 ValuerValueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ValuerValueFuncCall objects describing the
// invocations of this function.
func (f *ValuerValueFunc) History() []ValuerValueFuncCall {
	f.mutex.Lock()
	history := make([]ValuerValueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ValuerValueFuncCall is an object that describes an invocation of method
// Value on an instance of MockValuer.
type ValuerValueFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 driver.Value
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ValuerValueFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ValuerValueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
